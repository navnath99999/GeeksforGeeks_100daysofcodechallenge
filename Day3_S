/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
class GfG
{
    Node flatten(Node root)
    {
	    if (root == null || root.next == null)
	        return root;
	    root.next = flatten(root.next);
	    root = merge(root, root.next);
	    return root;
    }
    
    Node merge(Node l1, Node l2)
    {
        Node temp = new Node(-1);
        Node result = temp;
        
        while (l1 != null && l2 != null)
        {
            if (l1.data < l2.data)
            {
                temp.bottom = l1;
                l1 = l1.bottom;
            }
            else
            {
                temp.bottom = l2;
                l2 = l2.bottom;
            }
            
            temp = temp.bottom;
        }
        
        if (l1 != null)
            temp.bottom = l1;
        else
            temp.bottom = l2;
        
        return result.bottom;
    }
}
