/*Node class  used in the program
class Node
{
	int data;
	Node next;
	Node bottom;
	
	Node(int d)
	{
		data = d;
		next = null;
		bottom = null;
	}
}
*/
/*  Function which returns the  root of 
    the flattened linked list. */
class GfG
{
    Node flatten(Node root)
    {
	    if(root == null || root.next == null) return root;
	    Node head = root, nextHead = root.next;
	    while(nextHead != null){
	        Node temp = nextHead.next;
	        head.next = null;
	        nextHead.next = null;
	        head = merge(head, nextHead);
	        nextHead = temp;
	    }
	    return head;
    }
    
    Node merge(Node head1, Node head2)
    {
        if(head1 == null) return head2;
        if(head2 == null) return head1;
        if(head1.data <= head2.data)
        {
            head1.bottom = merge(head1.bottom, head2);
            return head1;
        }
        head2.bottom = merge(head1, head2.bottom);
        return head2;
    }
}
